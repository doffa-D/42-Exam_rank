#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

int ft_strlen(char *str)
{
    int i = 0;
    while(str[i])
        i++;
    return i;
}

int main(int argc,char **argv,char **env)
{
    int i = 0;
    if(argc < 2)
        return 0;
    while(argv[i] && argv[++i])
    {
        argv += i;
        i = 0;
        while(argv[i] && argv[i][0] != ';' && argv[i][0] != '|')
            i++;
        if(strcmp(argv[0],"cd") == 0)
        {
            if(i != 2)
                write(2,"error: cd: bad arguments\n",ft_strlen("error: cd: bad arguments\n"));
            else if(chdir(argv[1]) == -1)
            {
                write(2,"error: cd: cannot change directory to \n",ft_strlen("error: cd: cannot change directory to \n"));
                write(2,argv[1],ft_strlen(argv[1]));
                write(2,"\n",1);
            }
        }
        else if(i != 0)
        {
            int fd[2];
            int has_pip = 0;
            int pid;
            int status;
            if(argv[i] && strcmp(argv[i],"|") == 0)
                has_pip = 1;
            if(has_pip && pipe(fd) == -1)
            {
                write(2,"error: fatal\n",ft_strlen("error: fatal\n"));
            }
            else
            {
                pid = fork();
                if(pid == 0)
                {
                    argv[i] = NULL;
                    if(has_pip && (dup2(fd[1],1) == -1 || close(fd[1]) == -1 || close(fd[0]) == -1))
                        write(2,"error: fatal",ft_strlen("error: fatal"));
                    if(execve(argv[0],argv,env) == -1)
                    {
                        write(2,"error: cannot execute ",ft_strlen("error: cannot execute "));
                        write(2,argv[0],ft_strlen(argv[0]));
                        write(2,"\n",1);
                        return 1;
                    }
                }
                waitpid(pid,&status,0);
                if(has_pip && (dup2(fd[0],0) == -1 || close(fd[1]) == -1 || close(fd[0]) == -1))
                    write(2,"error: fatal\n",ft_strlen("error: fatal\n"));
            }
        }
    }
    return 0;
}